generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String                    @id @default(cuid())
  name                    String?
  email                   String?                   @unique
  emailVerified           DateTime?
  image                   String?
  accounts                Account[]
  sessions                Session[]
  Member                  Member[]
  Workspace               Workspace[]
  AuthenticatedSubmission AuthenticatedSubmission[]
  Cursor                  Cursor[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cell {
  id        String   @id @default(cuid())
  value     String?
  rowId     String
  columnId  String
  tableId   String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now()) @db.Timestamp(6)
  Column    Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  Row       Row      @relation(fields: [rowId], references: [id], onDelete: Cascade)
  Table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@unique([rowId, columnId])
}

model Column {
  id              String      @id @default(cuid())
  width           Int         @default(150)
  name            String      @db.VarChar
  type            ColumnType
  dropdownOptions String[]
  fileUploadPath  String?
  rank            String
  tableId         String
  updatedAt       DateTime    @updatedAt
  createdAt       DateTime    @default(now()) @db.Timestamp(6)
  Table           Table       @relation(fields: [tableId], references: [id], onDelete: Cascade)
  Cell            Cell[]
  Filter          Filter[]
  Sort            Sort[]
  FormField       FormField[]
  Cursor          Cursor[]
}

model Member {
  role        MemberRole
  userId      String
  workspaceId String
  User        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  active      Boolean    @default(true)

  @@id([userId, workspaceId])
}

model AuthenticatedSubmission {
  id        String   @id @default(cuid())
  userId    String
  formId    String
  rowId     String
  row       Row      @relation(fields: [rowId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @db.Timestamp(6)
}

model Form {
  id                      String                    @id @default(cuid())
  name                    String                    @db.VarChar
  description             String
  authenticatedOnly       Boolean                   @default(false)
  singleSubmissionOnly    Boolean                   @default(false)
  tableId                 String                    @unique
  Table                   Table                     @relation(fields: [tableId], references: [id], onDelete: Cascade)
  fields                  FormField[]
  AuthenticatedSubmission AuthenticatedSubmission[]
}

model FormField {
  id          String  @id @default(cuid())
  label       String
  description String?
  required    Boolean @default(false)
  columnId    String
  Column      Column  @relation(fields: [columnId], references: [id], onDelete: Cascade)
  formId      String
  Form        Form    @relation(fields: [formId], references: [id], onDelete: Cascade)
}

model Row {
  id                      String                    @id @default(cuid())
  tableId                 String
  rank                    String
  updatedAt               DateTime                  @updatedAt
  createdAt               DateTime                  @default(now()) @db.Timestamp(6)
  Table                   Table                     @relation(fields: [tableId], references: [id], onDelete: Cascade)
  Cell                    Cell[]
  AuthenticatedSubmission AuthenticatedSubmission[]
  Cursor                  Cursor[]
}

model Table {
  id          String    @id @default(cuid())
  name        String    @db.VarChar
  workspaceId String
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  Column      Column[]
  Row         Row[]
  Cell        Cell[]
  Filter      Filter[]
  Sort        Sort[]
  Form        Form?
  Cursor      Cursor[]
}

enum FilterOperation {
  gt
  lt
  equals
  contains
  checked
  unchecked
  startsWith
  endsWith
}

model Filter {
  id        String           @id @default(cuid())
  columnId  String?
  tableId   String
  operation FilterOperation?
  value     String?
  Column    Column?          @relation(fields: [columnId], references: [id], onDelete: Cascade)
  Table     Table            @relation(fields: [tableId], references: [id], onDelete: Cascade)
}

enum SortDirection {
  asc
  desc
}

model Sort {
  id        String         @id @default(cuid())
  columnId  String?
  tableId   String
  direction SortDirection?
  Column    Column?        @relation(fields: [columnId], references: [id], onDelete: Cascade)
  Table     Table          @relation(fields: [tableId], references: [id], onDelete: Cascade)
}

model Cursor {
  id       String  @id @default(cuid())
  rowId    String?
  row      Row?    @relation(fields: [rowId], references: [id], onDelete: Cascade)
  columnId String?
  column   Column? @relation(fields: [columnId], references: [id], onDelete: Cascade)
  tableId  String
  table    Table   @relation(fields: [tableId], references: [id], onDelete: Cascade)
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workspace {
  id        String   @id @default(cuid())
  name      String   @db.VarChar
  ownerId   String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now()) @db.Timestamp(6)
  deleted   Boolean  @default(false)
  User      User     @relation(fields: [ownerId], references: [id])
  Member    Member[]
  Table     Table[]
}

enum ColumnType {
  text
  richtext
  url
  number
  dropdown
  tags
  checkbox
  date
  file
}

enum MemberRole {
  owner
  editor
  viewer
}
